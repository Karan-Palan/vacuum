{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://quobix.com/vacuum/schemas/ruleset.schema.json",
  "type": "object",
  "properties": {
    "description": {
      "type": "string"
    },
    "extends": {
      "$ref": "#/$defs/Extends"
    },
    "aliases": {
      "type": "object",
      "propertyNames": {
        "pattern": "^[A-Za-z][A-Za-z\\d_-]*$",
        "errorMessage": {
          "pattern": "to avoid confusion the name must match /^[A-Za-z][A-Za-z\\d_-]*$/ regular expression",
          "minLength": "the name of an alias must not be empty"
        }
      },
      "additionalProperties": {
        "if": {
          "type": "object"
        },
        "then": {
          "type": "object",
          "required": [ "targets" ],
          "properties": {
            "description": {
              "type": "string"
            },
            "targets": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "required": [ "formats", "given" ],
                "properties": {
                  "formats": {
                    "$ref": "#/$defs/Formats"
                  },
                  "given": {
                    "$ref": "#/$defs/Given"
                  }
                },
                "errorMessage": "a valid target must contain given and non-empty formats"
              },
              "errorMessage": {
                "minItems": "targets must have at least a single alias definition"
              }
            }
          },
          "errorMessage": {
            "required": "targets must be present and have at least a single alias definition"
          }
        },
        "else": {
          "$ref": "#/$defs/Given"
        }
      }
    },
    "documentationUrl": {
      "type": "string",
      "format": "url",
      "errorMessage": "must be a valid URL"
    },
    "formats": {
      "$ref": "#/$defs/Formats"
    },
    "functions": {
      "$ref": "#/$defs/Functions"
    },
    "functionsDir": {
      "$ref": "#/$defs/FunctionsDir"
    },
    "overrides": {
      "type": "array",
      "minItems": 1,
      "items": {
        "if": {
          "type": "object",
          "required": [ "files" ],
          "properties": {
            "files": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string",
                "pattern": "^[^#]+#",
                "minLength": 1
              },
              "errorMessage": "must be a non-empty array of glob patterns"
            }
          }
        },
        "then": {
          "type": "object",
          "required": [ "rules" ],
          "properties": {
            "files": true,
            "rules": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/$defs/Severity"
              },
              "errorMessage": {
                "enum": "must be a valid severity level"
              }
            }
          },
          "additionalProperties": false,
          "errorMessage": {
            "required": "must contain rules when JSON Pointers are defined",
            "additionalProperties": "must not override any other property than rules when JSON Pointers are defined"
          }
        },
        "else": {
          "allOf": [
            {
              "type": "object",
              "required": [ "files" ],
              "properties": {
                "files": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "pattern": "[^#]",
                    "minLength": 1
                  },
                  "errorMessage": "must be a non-empty array of glob patterns"
                }
              },
              "errorMessage": {
                "type": "must be an override, i.e. { \"files\": [\"v2/**/*.json\"], \"rules\": {} }"
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "required": [ "extends" ]
                },
                {
                  "required": [ "rules" ]
                }
              ],
              "properties": {
                "extends": {
                  "$ref": "#/properties/extends"
                },
                "aliases": {
                  "$ref": "#/properties/aliases"
                },
                "formats": {
                  "$ref": "#/$defs/Formats"
                },
                "parserOptions": {
                  "$ref": "#/properties/parserOptions"
                },
                "rules": {
                  "$ref": "#/properties/rules"
                }
              }
            }
          ]
        }
      },
      "errorMessage": {
        "minItems": "must not be empty"
      }
    },
    "parserOptions": {
      "type": "object",
      "properties": {
        "duplicateKeys": {
          "$ref": "#/$defs/Severity"
        },
        "incompatibleValues": {
          "$ref": "#/$defs/Severity"
        }
      },
      "additionalProperties": false
    },
    "rules": {
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "type": "object",
            "required": [ "given", "then" ],
            "properties": {
              "id": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "enum": [ "style", "validation" ],
                "errorMessage": "allowed types are \"style\" and \"validation\""
              },
              "then": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/Then"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/$defs/Then"
                    }
                  }
                ]
              },
              "category": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "documentationUrl": {
                "type": "string",
                "format": "url",
                "errorMessage": "must be a valid URL"
              },
              "formats": {
                "$ref": "#/$defs/Formats"
              },
              "given": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "howToFix": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "recommended": {
                "type": "boolean"
              },
              "resolved": {
                "type": "boolean"
              },
              "severity": {
                "$ref": "#/$defs/Severity"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false,
            "errorMessage": {
              "required": "the rule must have at least \"given\" and \"then\" properties"
            }
          },
          {
            "$ref": "#/$defs/HumanReadableSeverity"
          },
          {
            "type": "boolean"
          }
        ]
      }
    }
  },
  "additionalProperties": false,
  "$defs": {
    "DiagnosticSeverity": {
      "enum": [ -1, 0, 1, 2, 3 ]
    },
    "Extends": {
      "$anchor": "extends",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "minItems": 2,
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "enum": [ "all", "recommended", "off" ],
                    "errorMessage": "allowed types are \"off\", \"recommended\" and \"all\""
                  }
                ],
                "additionalItems": false
              }
            ]
          }
        }
      ]
    },
    "Format": {
      "$anchor": "format",
      "errorMessage": "must be a valid format",
      "spectral-runtime": "spectral-format"
    },
    "Formats": {
      "$anchor": "formats",
      "type": "array",
      "items": {
        "$ref": "#/$defs/Format"
      },
      "errorMessage": "must be an array of formats"
    },
    "Function": {
      "$anchor": "function",
      "type": "object",
      "required": [ "function" ],
      "properties": {
        "function": {
          "type": "string"
        }
      }
    },
    "Functions": {
      "$anchor": "functions",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "FunctionsDir": {
      "$anchor": "functionsDir",
      "type": "string"
    },
    "Given": {
      "$anchor": "given",
      "if": {
        "type": "array"
      },
      "then": {
        "$anchor": "arrayish-given",
        "type": "array",
        "minItems": 1,
        "items": {
          "$ref": "#/$defs/PathExpression"
        },
        "errorMessage": {
          "minItems": "must be a non-empty array of expressions"
        }
      },
      "else": {
        "$ref": "#/$defs/PathExpression"
      }
    },
    "HumanReadableSeverity": {
      "enum": [ "error", "warn", "info", "hint", "off" ]
    },
    "PathExpression": {
      "$id": "path-expression",
      "type": "string",
      "pattern": "^[$#]",
      "errorMessage": "must be a valid JSON Path expression or a reference to the existing Alias optionally paired with a JSON Path expression subset"
    },
    "Severity": {
      "$anchor": "severity",
      "oneOf": [
        {
          "$ref": "#/$defs/DiagnosticSeverity"
        },
        {
          "$ref": "#/$defs/HumanReadableSeverity"
        }
      ],
      "errorMessage": "the value has to be one of: 0, 1, 2, 3 or \"error\", \"warn\", \"info\", \"hint\", \"off\""
    },
    "Then": {
      "type": "object",
      "allOf": [
        {
          "properties": {
            "field": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [ "function" ],
          "spectral-runtime": "ruleset-function"
        }
      ]
    }
  }
}
